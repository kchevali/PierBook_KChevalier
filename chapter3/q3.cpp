#include <stdio.h>

const int maxCount = 30;

double run(double a, double b) {
  double x = 0, y = 0, i = 0, threshold = 4;
  while (++i < maxCount && x * x + y * y < threshold) {
    double x_ = x * x - y * y + a;
    y = 2 * x * y + b;
    x = x_;
  }
  // printf("A: %d, B: %d, X: %d Y: %d\n", a, b, x, y);
  return i / maxCount;
}

int main() {
  int length = 80, a = -2, b = 1, c = -1, d = 1;
  for (int i = 0; i < length; i++) {
    for (int j = 0; j < length; j++) {
      double first = a + (i / (double)length) * (b - a);
      double second = c + (j / (double)length) * (d - c);
      printf(run(first, second) > 0.5 ? "█" : " ");
    }
    printf("\n");
  }
}
/*
Question
Draw the Mandelbrot set. Write a function that
determines for a given pair (a, b) how many
iterations it takes before x2 + y2 > 4, as
these quantities are described in Exercise 2.3
You can give up after some large number of
iterations, like 1000.
Write a program that loops over values of a
and b and prints a * for every value that is
in the set and a space for every value that is
not. Put your function in a different file from
main and declare your function in a header file.
Create a Makefile to compile and link your code.
This will create an ASCII art picture of the
Mandelbrot set. What range of values and step
sizes do you need to choose to capture the entire
set in your terminal?


Output
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                        █
                                  ██   ███   ██
                                     ███████
                                    █████████
                                     ███████
                          ██     ███████████████     ██
                           █     ███████████████     █
                            █████████████████████████
                            █████████████████████████
                             ███████████████████████
                             ███████████████████████
                         █ ███████████████████████████ █
                           ███████████████████████████
                             ███████████████████████
                             ███████████████████████
                              █████████████████████
                               ███████████████████
                                █████████████████
                                █████████████████
                          █ █████████████████████████ █
                      █  ███████████████████████████████  █
                     ███████████████████████████████████████
             █ █     ███████████████████████████████████████     █ █
              ██ ██ █████████████████████████████████████████ ██ ██
              █████████████████████████████████████████████████████
               ███████████████████████████████████████████████████
               ███████████████████████████████████████████████████
                █████████████████████████████████████████████████
             ███████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
     ███████████████████████████████████████████████████████████████████████
      █████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████████████████████
 █ ███████████████████████████████████████████████████████████████████████████ █
   ███████████████████████████████████████████████████████████████████████████
      █████████████████████████████████████████████████████████████████████
       ███████████████████████████████████████████████████████████████████
      █       █████████████████████████████████████████████████████       █
              █████████████████████████████████████████████████████
               ███████████████████████████████████████████████████
             ███████████████████████████████████████████████████████
                █████████████████████████████████████████████████
                  █████████████████████████████████████████████
               █ ███████████████████████████████████████████████ █
                ████████████████████████ ████████████████████████
                █████ █████████████████   █████████████████ █████
              ████ █   █ █████████████     █████████████ █   █ ████
                █        ████  ██ █           █ ██  ████        █
                         ███   ██               ██   ███
*/