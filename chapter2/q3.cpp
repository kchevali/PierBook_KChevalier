#include <stdio.h>
#include <stdlib.h>

const int maxCount = 30;

double run(double a, double b) {
  double x = 0, y = 0, i = 0, threshold = 2;
  while (++i < maxCount && x * x + y * y < threshold) {
    double x_ = x * x - y * y + a;
    y = 2 * x * y + b;
    x = x_;
  }
  // printf("A: %d, B: %d, X: %d Y: %d\n", a, b, x, y);
  return i / maxCount;
}

int main() {
  int length = 80, a = -2, b = 1, c = -1, d = 1;
  for (int i = 0; i < length; i++) {
    for (int j = 0; j < length; j++) {
      double first = a + (i / (double)length) * (b - a);
      double second = c + (j / (double)length) * (d - c);
      printf(run(first, second) > 0.5 ? "█" : " ");
    }
    printf("\n");
  }
}
/*


Output

                                        █
                                     ███████
                                     ███████
                                     ███████
                                 █ ███████████ █
                                 ███████████████
                            █████████████████████████
                            █████████████████████████
                             ███████████████████████
                             ███████████████████████
                           ███████████████████████████
                            █████████████████████████
                             ███████████████████████
                             ███████████████████████
                              █████████████████████
                               ███████████████████
                                 ███████████████
                                 ███████████████
                          █ █████████████████████████ █
                      █  ███████████████████████████████  █
                     ███████████████████████████████████████
               █      █████████████████████████████████████      █
              ██ ██ █████████████████████████████████████████ ██ ██
              █████████████████████████████████████████████████████
               ███████████████████████████████████████████████████
               ███████████████████████████████████████████████████
                █████████████████████████████████████████████████
             ███████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
              █████████████████████████████████████████████████████
      ██████ ███████████████████████████████████████████████████████ ██████
       ███████████████████████████████████████████████████████████████████
    █ █████████████████████████████████████████████████████████████████████ █
 █ ███████████████████████████████████████████████████████████████████████████ █
   █ ███████████████████████████████████████████████████████████████████████ █
      █████████████████████████████████████████████████████████████████████
       ██████ █████████████████████████████████████████████████████ ██████
      █       █████████████████████████████████████████████████████       █
              █████████████████████████████████████████████████████
               ███████████████████████████████████████████████████
             ███████████████████████████████████████████████████████
                 ███████████████████████████████████████████████
                  █████████████████████████████████████████████
               █ ███████████████████████████████████████████████ █
                ████████████████████████ ████████████████████████
                 ████  ████████████████   ████████████████  ████
              ████ █   █ █████████████     █████████████ █   █ ████
                █        ███   ██ █           █ ██   ███        █
                         ███    █               █    ███
*/